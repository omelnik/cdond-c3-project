version: 2.1

orbs:
  slack: circleci/slack@4.3.0


executors:
  docker-node-executor:
    docker:
      - image: circleci/node:13.8.0
  aws-cli:
    docker:
      - image: amazon/aws-cli
  python-docker-executor:
    docker:
      - image: cimg/python:3.10.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  notify_slack_error:
    description: Slack Notification
    steps:
        - slack/notify:
            event: fail
            template: basic_fail_1



jobs:
  notify_slack_pass:
    executor: docker-node-executor
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  build-frontend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm ci
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - notify_slack_error

  build-backend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm ci
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
  
  test-frontend:
    executor: docker-node-executor
    parallelism: 2 # how many CircleCI machines to use
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm ci
            TESTFILES=$(circleci tests glob "src/**/**.spec.*" | circleci tests split --split-by=timings)
            npm run test $TESTFILES
      - notify_slack_error

  test-backend:
    executor: docker-node-executor
    parallelism: 2 # how many CircleCI machines to use
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm ci
            TESTFILES=$(circleci tests glob "src/**/**.spec.ts" | circleci tests split --split-by=timings)
            npm test $TESTFILES
      - notify_slack_error
        
  scan-backend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm ci
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
      - notify_slack_error

  scan-frontend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm ci
            npm audit --audit-level=critical
      - notify_slack_error

  deploy-backend-infrastructure:
    executor: aws-cli
    steps:
      - checkout
      - run:
          name: Install yum dependencies
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  deploy-frontend-infrastructure:
    executor: aws-cli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - destroy-environment

  configure-infrastructure:
    executor: python-docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./ 
      - add_ssh_keys:
          fingerprints: ["f1:0a:3c:b1:e9:47:bb:6c:e1:96:ca:6e:63:60:d0:91"]
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get install -y \
                              ansible \ 
                              tar \
                              gzip \
                              awscli

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-frontend-infra:
          requires: [test-frontend, scan-frontend]
      - deploy-backend-infra:
          requires: [test-backend,  scan-backend]