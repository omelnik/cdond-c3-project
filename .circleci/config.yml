version: 2.1

orbs:
  slack: circleci/slack@4.3.0

executors:
  docker-node-executor:
    docker:
      - image: circleci/node:13.8.0
  aws-cli:
    docker:
      - image: amazon/aws-cli
  docker-python-executor:
    docker:
      - image: cimg/python:3.10.2

commands: 
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowId >>

      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            S3_BUCKET="s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            if aws s3 ls "${S3_BUCKET}" 2>&1 | grep -q 'An error occurred'
            then
                echo "bucket does not exist."
            else
                aws s3 rm ${S3_BUCKET} --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowId >>

  revert-migrations:
    description: Revert the last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${MIRGRATION_STATUS_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi 


  notify_slack_error:
    description: Slack Notification
    steps:
        - slack/notify:
            event: fail
            template: basic_fail_1

jobs:
  notify_slack_pass:
    executor: docker-node-executor
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  build-frontend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm ci
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - notify_slack_error

  build-backend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm ci
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
  
  test-frontend:
    executor: docker-node-executor
    parallelism: 2 # how many CircleCI machines to use
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm ci
            TESTFILES=$(circleci tests glob "src/**/**.spec.*" | circleci tests split --split-by=timings)
            npm run test $TESTFILES
      - notify_slack_error

  test-backend:
    executor: docker-node-executor
    parallelism: 2 # how many CircleCI machines to use
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm ci
            TESTFILES=$(circleci tests glob "src/**/**.spec.ts" | circleci tests split --split-by=timings)
            npm test $TESTFILES
      - notify_slack_error
        
  scan-backend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm ci
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
      - notify_slack_error

  scan-frontend:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm ci
            npm audit --audit-level=critical
      - notify_slack_error

  deploy-backend-infra:
    executor: aws-cli
    steps:
      - checkout
      - run:
          name: Install yum dependencies
          command: |
            yum -y install tar gzip jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            PublicIpAddress=$(aws ec2 describe-instances --query "Reservations[?Instances[?Tags[?Value=='backend-${CIRCLE_WORKFLOW_ID:0:7}']]]" | jq ".[].Instances[].PublicIpAddress")
            echo $PublicIpAddress >> inventory.txt

      - persist_to_workspace:
          root: .
          paths: 
            - inventory.txt

      - destroy-environment

  deploy-frontend-infra:
    executor: aws-cli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - destroy-environment

  configure-infra:
    executor: docker-python-executor
    steps:
      - checkout

      - attach_workspace:
          at: ./.circleci/ansible

      - add_ssh_keys:
          fingerprints: ["04:82:cf:d1:a8:3d:25:9f:c9:39:e3:9c:f8:6b:42:f5"]

      - run:
          name: Install dependencies
          command: |
              sudo apt-get update && sudo apt-get install -y tar gzip
              pip install ansible

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    executor: docker-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm ci
            npm run migrations > migrations_dump.txt

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y ca-certificates
            
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/${MIRGRATION_STATUS_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi

  deploy-frontend:
    executor: aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
              yum install -y tar gzip
              curl -sL https://rpm.nodesource.com/setup_16.x | bash -
              yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                    --query 'Reservations[0].Instances[0].PublicIpAddress' \
                    --output text \
                    --filters "Name = tag:Name, Values = backend-${CIRCLE_WORKFLOW_ID:0:7}")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm ci
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  deploy-backend:
    executor: docker-python-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - attach_workspace:
          at: ./.circleci/ansible

      - add_ssh_keys:
          fingerprints: ["04:82:cf:d1:a8:3d:25:9f:c9:39:e3:9c:f8:6b:42:f5"]

      - run:
          name: Install dependencies
          command: |
              sudo apt-get update && sudo apt-get install -y tar gzip
              curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
              sudo apt-get install -y nodejs
              pip install ansible awscli

      - run: 
          name: Prepare backend artifact
          command: |
            cd backend
            npm i
            npm run build

      - run:
          name: Create backend artifact
          command: |
            mkdir -p .circleci/ansible/roles/deploy/files
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      - destroy-environment

  smoke-test:
    executor: docker-python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y ca-certificates
            pip install awscli
            
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text \
              --filters "Name = tag:Name, Values = backend-${CIRCLE_WORKFLOW_ID:0:7}")
            
            API_URL="http://${BACKEND_IP}:3030/api/status"
            if curl ${API_URL} | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    executor: aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
    executor: docker-python-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y ca-certificates jq
            pip install awscli
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(aws cloudformation describe-stacks | jq '.Stacks[] | select(.StackName!="InitialStack" and .Parameters[].ParameterValue!="${CIRCLE_WORKFLOW_ID:0:7}").Parameters[].ParameterValue' | jq --slurp '.[0]')
            S3_BUCKET="s3://udapeople-${OldWorkflowID}"
            if aws s3 ls "${S3_BUCKET}" 2>&1 | grep -q 'An error occurred'
            then
                echo "bucket does not exist."
            else
                aws s3 rm ${S3_BUCKET} --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-frontend-infra:
          requires: [test-frontend, scan-frontend]
      - deploy-backend-infra:
          requires: [test-backend,  scan-backend]
      - configure-infra:
          requires: [deploy-backend-infra, deploy-frontend-infra]
      - run-migrations:
          requires: [configure-infra]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
